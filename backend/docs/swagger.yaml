basePath: /api/v1
definitions:
  model.AvoidanceAreaRequest:
    properties:
      is_permanent:
        type: boolean
      photo:
        description: Base64 encoded image (deprecated)
        type: string
      photo_key:
        description: S3 object key yang sudah diupload
        type: string
      points:
        items:
          $ref: '#/definitions/model.AvoidancePointRequest'
        minItems: 3
        type: array
      reason:
        type: string
      requester_id:
        description: ID of the user who requested the avoidance area
        type: integer
      status:
        description: 'Status of the area: pending, approved, rejected'
        type: string
    required:
    - points
    - reason
    type: object
  model.AvoidancePointRequest:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  model.BaseResponse:
    properties:
      apiVersion:
        type: string
      context:
        type: string
      data: {}
      error:
        $ref: '#/definitions/model.ErrorData'
      id:
        type: string
      method:
        type: string
      params: {}
    type: object
  model.DriverLocationRequest:
    properties:
      accuracy:
        type: number
      bearing:
        type: number
      latitude:
        type: number
      longitude:
        type: number
      speed:
        type: number
      timestamp:
        type: string
    required:
    - latitude
    - longitude
    - timestamp
    type: object
  model.ErrorData:
    properties:
      code:
        type: integer
      errors:
        items:
          $ref: '#/definitions/model.ErrorInfo'
        type: array
      message:
        type: string
    type: object
  model.ErrorInfo:
    properties:
      domain:
        type: string
      extendedHelp:
        type: string
      location:
        type: string
      locationType:
        type: string
      message:
        type: string
      reason:
        type: string
      sendReport:
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  model.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        type: string
    required:
    - email
    - name
    - role
    type: object
  model.ResetPasswordRequest:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  model.RoutePlanCreateRequest:
    properties:
      avoidance_areas:
        items:
          $ref: '#/definitions/model.AvoidanceAreaRequest'
        type: array
      driver_name:
        type: string
      extras_data:
        description: JSON string data untuk extras
        type: string
      route_geometry:
        type: string
      vehicle_plate:
        type: string
      waypoints:
        items:
          $ref: '#/definitions/model.WaypointRequest'
        minItems: 2
        type: array
    required:
    - driver_name
    - vehicle_plate
    - waypoints
    type: object
  model.RoutePlanUpdateRequest:
    properties:
      extras:
        additionalProperties: true
        type: object
      route_geometry:
        type: string
    type: object
  model.RoutingRequest:
    properties:
      coordinates:
        items:
          items:
            type: number
          type: array
        type: array
      elevation:
        type: boolean
      extra_info:
        items:
          type: string
        type: array
      geometry_simplify:
        type: string
      instructions_format:
        type: string
      language:
        type: string
      options:
        additionalProperties: true
        type: object
    type: object
  model.TruckCreateRequest:
    properties:
      mac_id:
        type: string
      plate_number:
        type: string
      type:
        type: string
    type: object
  model.TruckUpdateFullRequest:
    properties:
      mac_id:
        type: string
      plate_number:
        type: string
      type:
        type: string
    type: object
  model.TruckUpdateRequest:
    properties:
      plate_number:
        type: string
      type:
        type: string
    type: object
  model.UpdatePasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  model.WaypointRequest:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
host: localhost:8080
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the authenticated user
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - profile
  /profile/password:
    put:
      consumes:
      - application/json
      description: Update the password of the authenticated user
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - profile
  /route-plans:
    get:
      consumes:
      - application/json
      description: Get a list of all route plans
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Route plans data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get all route plans
      tags:
      - route-plans
    post:
      consumes:
      - application/json
      description: Create a new route plan with waypoints and avoidance areas
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RoutePlanCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created route plan
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create a new route plan
      tags:
      - route-plans
  /route-plans/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a route plan and all associated data
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete a route plan
      tags:
      - route-plans
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific route plan
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Route plan data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get route plan by ID
      tags:
      - route-plans
    put:
      consumes:
      - application/json
      description: Update the route geometry and extras data of a route plan
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      - description: Route update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RoutePlanUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update route plan geometry and extras
      tags:
      - route-plans
  /route-plans/{id}/avoidance:
    post:
      consumes:
      - application/json
      description: Add new avoidance area with points to an existing route plan
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      - description: Avoidance area details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AvoidanceAreaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added avoidance area
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Add avoidance area to a route plan
      tags:
      - route-plans
  /route-plans/{id}/location:
    post:
      consumes:
      - application/json
      description: Update the current location of a driver for a specific route
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      - description: Location details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.DriverLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated location
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update driver location
      tags:
      - driver-locations
  /route-plans/{id}/location/history:
    delete:
      consumes:
      - application/json
      description: Delete all location history for a route
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete location history
      tags:
      - driver-locations
    get:
      consumes:
      - application/json
      description: Get the location history of a driver for a specific route
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Driver location history data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get driver location history
      tags:
      - driver-locations
  /route-plans/{id}/location/latest:
    get:
      consumes:
      - application/json
      description: Get the latest location of a driver for a specific route
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Driver location data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get latest driver location
      tags:
      - driver-locations
  /route-plans/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a route plan
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Route plan ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status update
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update route plan status
      tags:
      - route-plans
  /route-plans/active:
    get:
      consumes:
      - application/json
      description: Get the active route for a driver with their current location
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Active route data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get active route
      tags:
      - driver-locations
  /route-plans/avoidance/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an avoidance area and all its points
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Avoidance area ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete an avoidance area
      tags:
      - route-plans
  /route-plans/avoidance/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an avoidance area
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Avoidance area ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status update
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update avoidance area status
      tags:
      - route-plans
  /route-plans/avoidance/non-permanent:
    get:
      consumes:
      - application/json
      description: Get a list of all non-permanent avoidance areas
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Non-permanent avoidance areas data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get all non-permanent avoidance areas
      tags:
      - route-plans
  /route-plans/avoidance/permanent:
    get:
      consumes:
      - application/json
      description: Get a list of all permanent avoidance areas
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permanent avoidance areas data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get all permanent avoidance areas
      tags:
      - route-plans
  /route-plans/driver/{driverID}:
    get:
      consumes:
      - application/json
      description: Get all route plans created for a specific driver
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Driver ID
        in: path
        name: driverID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Route plans data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get route plans by driver ID
      tags:
      - route-plans
  /routing/directions:
    post:
      consumes:
      - application/json
      description: Proxy API call to routing service to get directions
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Routing request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RoutingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Directions data
          schema: {}
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get directions from external routing service (OpenRouteService)
      tags:
      - routing
  /trucks:
    get:
      consumes:
      - application/json
      description: Get all truck data with latest position and fuel
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trucks data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get all trucks
      tags:
      - trucks
    post:
      consumes:
      - application/json
      description: Create a new truck with mac_id, type, and plate_number
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Truck creation information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TruckCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create a new truck
      tags:
      - trucks
  /trucks/{macID}:
    get:
      consumes:
      - application/json
      description: Get truck data by MAC ID
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: MAC ID of the truck
        in: path
        name: macID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Truck data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get truck by MacID
      tags:
      - trucks
    put:
      consumes:
      - application/json
      description: Update truck plate number and type
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: MAC ID of the truck
        in: path
        name: macID
        required: true
        type: string
      - description: Truck update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TruckUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update truck information
      tags:
      - trucks
  /trucks/{truckID}/fuel:
    get:
      consumes:
      - application/json
      description: Get historical fuel data for a truck
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Truck ID
        in: path
        name: truckID
        required: true
        type: integer
      - description: Limit results (default 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fuel history
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get truck fuel history
      tags:
      - trucks
  /trucks/{truckID}/positions:
    get:
      consumes:
      - application/json
      description: Get historical position data for a truck
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Truck ID
        in: path
        name: truckID
        required: true
        type: integer
      - description: Limit results (default 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Position history
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get truck position history
      tags:
      - trucks
  /trucks/id/{id}:
    put:
      consumes:
      - application/json
      description: Update truck plate number, type, and MAC ID by truck ID
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of the truck
        in: path
        name: id
        required: true
        type: string
      - description: Truck update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TruckUpdateFullRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update truck information by ID
      tags:
      - trucks
  /uploads/photo:
    post:
      consumes:
      - multipart/form-data
      description: Upload a photo and get back the S3 URL
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo file to upload
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully uploaded photo
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Upload a photo to S3
      tags:
      - uploads
  /uploads/photo/base64:
    post:
      consumes:
      - application/json
      description: Upload a base64 encoded photo and get back the S3 URL
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Photo data
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successfully uploaded photo
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Upload a base64 encoded photo to S3
      tags:
      - uploads
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with optional role filter
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Filter users by role (optional)
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user information by user ID
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/{id}/role:
    get:
      consumes:
      - application/json
      description: Get user role by user ID
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User role
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get user role by ID
      tags:
      - users
  /users/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password to default value
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Reset user password
      tags:
      - users
schemes:
- http
swagger: "2.0"
