basePath: /api/v1
definitions:
  model.BaseResponse:
    properties:
      apiVersion:
        type: string
      context:
        type: string
      data: {}
      error:
        $ref: '#/definitions/model.ErrorData'
      id:
        type: string
      method:
        type: string
      params: {}
    type: object
  model.ErrorData:
    properties:
      code:
        type: integer
      errors:
        items:
          $ref: '#/definitions/model.ErrorInfo'
        type: array
      message:
        type: string
    type: object
  model.ErrorInfo:
    properties:
      domain:
        type: string
      extendedHelp:
        type: string
      location:
        type: string
      locationType:
        type: string
      message:
        type: string
      reason:
        type: string
      sendReport:
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  model.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        type: string
    required:
    - email
    - name
    - role
    type: object
  model.ResetPasswordRequest:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  model.RoutingRequest:
    properties:
      coordinates:
        items:
          items:
            type: number
          type: array
        type: array
      elevation:
        type: boolean
      extra_info:
        items:
          type: string
        type: array
      geometry_simplify:
        type: string
      instructions_format:
        type: string
      language:
        type: string
      options:
        additionalProperties: true
        type: object
    type: object
  model.TruckUpdateRequest:
    properties:
      plate_number:
        type: string
      type:
        type: string
    type: object
  model.UpdatePasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
host: localhost:8080
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered user
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the authenticated user
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - profile
  /profile/password:
    put:
      consumes:
      - application/json
      description: Update the password of the authenticated user
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - profile
  /routing/directions:
    post:
      consumes:
      - application/json
      description: Proxy API call to OpenRouteService to get directions
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Routing request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RoutingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Directions data
          schema: {}
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get directions from OpenRouteService
      tags:
      - routing
  /trucks:
    get:
      consumes:
      - application/json
      description: Get all truck data with latest position and fuel
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trucks data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get all trucks
      tags:
      - trucks
  /trucks/{macID}:
    get:
      consumes:
      - application/json
      description: Get truck data by MAC ID
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: MAC ID of the truck
        in: path
        name: macID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Truck data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get truck by MacID
      tags:
      - trucks
    put:
      consumes:
      - application/json
      description: Update truck plate number and type
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: MAC ID of the truck
        in: path
        name: macID
        required: true
        type: string
      - description: Truck update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TruckUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update truck information
      tags:
      - trucks
  /trucks/{truckID}/fuel:
    get:
      consumes:
      - application/json
      description: Get historical fuel data for a truck
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Truck ID
        in: path
        name: truckID
        required: true
        type: integer
      - description: Limit results (default 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fuel history
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get truck fuel history
      tags:
      - trucks
  /trucks/{truckID}/positions:
    get:
      consumes:
      - application/json
      description: Get historical position data for a truck
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Truck ID
        in: path
        name: truckID
        required: true
        type: integer
      - description: Limit results (default 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Position history
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get truck position history
      tags:
      - trucks
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with optional role filter
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Filter users by role (optional)
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users data
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password to default value
      parameters:
      - default: Bearer <token>
        description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.BaseResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/model.BaseResponse'
      security:
      - BearerAuth: []
      summary: Reset user password
      tags:
      - users
schemes:
- http
swagger: "2.0"
