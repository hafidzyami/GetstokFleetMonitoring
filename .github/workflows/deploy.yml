name: Build and Deploy to Production EC2

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - mqtt_broker/**
      - .github/workflows/deploy-staging.yml
      - hardware/**
      - firmware/**
  workflow_dispatch:

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Lint Frontend
      run: |
        cd frontend
        npm ci
        npm run lint
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Lint Backend (Go)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend
        args: --timeout=5m

  deploy:
    name: Deploy to Production EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1 
        
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem

    - name: Deploy to Production EC2
      run: |
        ssh \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=60 \
          -o StrictHostKeyChecking=no \
          -i ~/.ssh/ec2.pem \
          ec2-user@${{ secrets.EC2_HOST }} '
          # Log directory
          mkdir -p ~/deploy-logs
          
          # Log file
          LOG_FILE=~/deploy-logs/deploy-production-$(date +%Y-%m-%d-%H-%M-%S).log
          
          # Start logging
          {
            echo "=== Production Deployment started at $(date) ==="
            
            # Check disk space before deployment
            echo "Current disk usage:"
            df -h /
            
            # Install git if not available
            if ! command -v git &> /dev/null; then
              echo "Git not found. Installing git..."
              sudo yum install -y git
            fi
            
            # Install Docker and Docker Compose if not available
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found. Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Update repository using git pull instead of rm and clone
            echo "Updating repository with git pull..."
            if [ -d ~/GetstokFleetMonitoring ]; then
              cd ~/GetstokFleetMonitoring
              # Check for local changes and reset if needed
              git status --porcelain | grep -q . && git reset --hard
              git checkout main
              git pull origin main
            else
              # If directory doesn'\''t exist, create and clone
              echo "Directory not found, creating and cloning repository..."
              mkdir -p ~/GetstokFleetMonitoring
              cd ~/GetstokFleetMonitoring
              git clone -b main https://github.com/hafidzyami/GetstokFleetMonitoring.git .
            fi
            
            # Ensure all .env files exist
            if [ -f backend/.env.example ] && [ ! -f backend/.env ]; then
              echo "Creating backend/.env from backend/.env.example"
              cp backend/.env.example backend/.env
              
              # Adjust configuration for production
              sed -i "s/NODE_ENV=.*/NODE_ENV=production/" backend/.env
              sed -i "s/APP_ENV=.*/APP_ENV=production/" backend/.env
            fi
            
            if [ -f backend/.env.db.example ] && [ ! -f backend/.env.db ]; then
              echo "Creating backend/.env.db from backend/.env.db.example"
              cp backend/.env.db.example backend/.env.db
            fi
            
            if [ -f notification_service/.env.example ] && [ ! -f notification_service/.env ]; then
              echo "Creating notification_service/.env from notification_service/.env.example"
              cp notification_service/.env.example notification_service/.env
            fi
            
            if [ -f frontend/.env.example ] && [ ! -f frontend/.env ]; then
              echo "Creating frontend/.env from frontend/.env.example"
              cp frontend/.env.example frontend/.env
              
              # Set API endpoint for production
              sed -i "s/NEXT_PUBLIC_API_URL=.*/NEXT_PUBLIC_API_URL=https:\/\/api.getstokfms.com/" frontend/.env
            fi
            
            # Make sure required directories for mqtt broker exist
            echo "Checking and creating MQTT broker directories if needed..."
            mkdir -p mqtt_broker/mqtt/data mqtt_broker/mqtt/log
            chmod -R 777 mqtt_broker/mqtt/data mqtt_broker/mqtt/log
            
            # Ensure Docker is running
            if ! systemctl is-active --quiet docker; then
              echo "Starting Docker service..."
              sudo systemctl start docker
            fi
            
            # Check if docker-compose.yml exists
            if [ ! -f docker-compose.yml ]; then
              echo "ERROR: docker-compose.yml not found in repository"
              exit 1
            fi
            
            # Modifikasi docker-compose.yml untuk menggunakan image dari DockerHub
            echo "Modifying docker-compose.yml to use DockerHub images..."
            sed -i "s/build:\\n\\s*context: .\\/frontend/image: hafidzyami\\/getstok-frontend:production/" docker-compose.yml
            sed -i "s/build:\\n\\s*context: .\\/backend/image: hafidzyami\\/getstok-backend:production/" docker-compose.yml
            
            # Stop existing containers
            echo "Stopping existing containers..."
            docker-compose down
            
            # Aggressive cleanup before deployment
            echo "Performing aggressive Docker cleanup before building..."
            # Remove all stopped containers
            docker container prune -f
            # Remove all dangling images
            docker image prune -f
            # Remove unused volumes
            docker volume prune -f
            # Remove unused networks
            docker network prune -f
            # Remove all unused images (not just dangling ones)
            docker image prune -a -f
            
            # Login to Docker Hub if needed for pulling private images
            echo "Logging in to Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u hafidzyami --password-stdin
            
            # Pull latest images
            echo "Pulling latest images..."
            docker-compose pull
            
            # Build only local services
            echo "Building MQTT Broker..."
            docker-compose build mqtt-broker --no-cache
            echo "Building Notification Service..."
            docker-compose build notification-service --no-cache
            
            # Start all services
            echo "Starting all services..."
            docker-compose up -d
            
            # Thorough cleanup after deployment
            echo "Performing thorough cleanup after deployment..."
            # Keep only images used by running containers
            docker image prune -a -f
            # Clean entire system
            docker system prune -a -f --volumes
            
            # Cleanup old logs (keep only the most recent 10)
            echo "Cleaning up old deployment logs..."
            cd ~/deploy-logs
            ls -t | tail -n +11 | xargs -r rm
            
            # Check disk space after deployment
            echo "Disk usage after deployment:"
            df -h /
            
            echo "=== Production Deployment completed at $(date) ==="
          } 2>&1 | tee -a "$LOG_FILE"
          
          # Display result
          echo "Production Deployment completed. Log saved to $LOG_FILE"
        '