name: Deploy to EC2

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Lint Frontend
      run: |
        cd frontend
        npm ci
        npm run lint
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24' # Adjust
    
    - name: Lint Backend (Go)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend
        args: --timeout=5m  # Sesuaikan timeout jika diperlukan

  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1 
        
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2.pem ec2-user@${{ secrets.EC2_HOST }} '
          # Log directory
          mkdir -p ~/deploy-logs
          
          # Log file
          LOG_FILE=~/deploy-logs/deploy-$(date +%Y-%m-%d-%H-%M-%S).log
          
          # Start logging
          {
            echo "=== Deployment started at $(date) ==="
            
            # Navigate to project directory
            cd ~/GetstokFleetMonitoring
            
            # Pull latest changes
            echo "Pulling latest changes..."
            git pull origin main
            
            # Pastikan semua file .env ada
            if [ -f backend/.env.example ] && [ ! -f backend/.env ]; then
              echo "Creating backend/.env from backend/.env.example"
              cp backend/.env.example backend/.env
            fi
            
            if [ -f backend/.env.db.example ] && [ ! -f backend/.env.db ]; then
              echo "Creating backend/.env.db from backend/.env.db.example"
              cp backend/.env.db.example backend/.env.db
            fi
            
            if [ -f notification_service/.env.example ] && [ ! -f notification_service/.env ]; then
              echo "Creating notification_service/.env from notification_service/.env.example"
              cp notification_service/.env.example notification_service/.env
            fi
            
            if [ -f frontend/.env.example ] && [ ! -f frontend/.env ]; then
              echo "Creating frontend/.env from frontend/.env.example"
              cp frontend/.env.example frontend/.env
            fi
            
            # Stop all containers
            echo "Stopping existing containers..."
            docker-compose down
            
            # Build and start containers
            echo "Building and starting containers..."
            docker-compose build --no-cache
            docker-compose up -d
            
            # Clean up unused Docker resources
            echo "Cleaning up..."
            docker system prune -f
            
            echo "=== Deployment completed at $(date) ==="
          } 2>&1 | tee -a "$LOG_FILE"
          
          # Display result
          echo "Deployment completed. Log saved to $LOG_FILE"
        '