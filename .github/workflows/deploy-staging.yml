name: Deploy to Staging EC2

on:
  push:
    branches: [ staging ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - mqtt_broker/**
      - .github/workflows/deploy.yml
  workflow_dispatch:

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Lint Frontend
      run: |
        cd frontend
        npm ci
        npm run lint
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Lint Backend (Go)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend
        args: --timeout=5m

  deploy:
    name: Deploy to Staging EC2
    runs-on: ubuntu-latest
    # Deploy akan tetap berjalan meskipun lint check gagal
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1 
        
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/ec2_staging.pem
        chmod 600 ~/.ssh/ec2_staging.pem

    - name: Deploy to Staging EC2
      run: |
        ssh \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=60 \
          -o StrictHostKeyChecking=no \
          -i ~/.ssh/ec2_staging.pem \
          ec2-user@${{ secrets.STAGING_EC2_HOST }} '
          # Log directory
          mkdir -p ~/deploy-logs
          
          # Log file
          LOG_FILE=~/deploy-logs/deploy-staging-$(date +%Y-%m-%d-%H-%M-%S).log
          
          # Start logging
          {
            echo "=== Staging Deployment started at $(date) ==="
            
            # Check disk space before deployment
            echo "Current disk usage:"
            df -h /
            
            # Install git if not available
            if ! command -v git &> /dev/null; then
              echo "Git not found. Installing git..."
              sudo yum install -y git
            fi
            
            # Install Docker and Docker Compose if not available
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found. Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Update repository dengan git pull alih-alih rm dan clone
            echo "Updating repository with git pull..."
            if [ -d ~/GetstokFleetMonitoring-staging ]; then
              cd ~/GetstokFleetMonitoring-staging
              # Periksa apakah ada perubahan lokal dan reset jika perlu
              git status --porcelain | grep -q . && git reset --hard
              git checkout staging
              git pull origin staging
            else
              # Jika direktori tidak ada, buat dan clone
              echo "Directory not found, creating and cloning repository..."
              mkdir -p ~/GetstokFleetMonitoring-staging
              cd ~/GetstokFleetMonitoring-staging
              git clone -b staging https://github.com/hafidzyami/GetstokFleetMonitoring.git .
            fi
            
            # Pastikan semua file .env ada
            if [ -f backend/.env.example ] && [ ! -f backend/.env ]; then
              echo "Creating backend/.env from backend/.env.example"
              cp backend/.env.example backend/.env
              
              # Ubah konfigurasi untuk staging jika perlu
              sed -i "s/NODE_ENV=production/NODE_ENV=production/" backend/.env
              sed -i "s/APP_ENV=production/APP_ENV=staging/" backend/.env
            fi
            
            if [ -f backend/.env.db.example ] && [ ! -f backend/.env.db ]; then
              echo "Creating backend/.env.db from backend/.env.db.example"
              cp backend/.env.db.example backend/.env.db
            fi
            
            if [ -f notification_service/.env.example ] && [ ! -f notification_service/.env ]; then
              echo "Creating notification_service/.env from notification_service/.env.example"
              cp notification_service/.env.example notification_service/.env
            fi
            
            if [ -f frontend/.env.example ] && [ ! -f frontend/.env ]; then
              echo "Creating frontend/.env from frontend/.env.example"
              cp frontend/.env.example frontend/.env
              
              # Ubah API endpoint untuk staging jika perlu
              sed -i "s/NEXT_PUBLIC_API_URL=.*/NEXT_PUBLIC_API_URL=https:\/\/staging-api.getstokfms.com/" frontend/.env
            fi
            
            # Pastikan Docker berjalan
            if ! systemctl is-active --quiet docker; then
              echo "Starting Docker service..."
              sudo systemctl start docker
            fi
            
            # Cek apakah file docker-compose.yml ada
            if [ ! -f docker-compose.yml ]; then
              echo "ERROR: docker-compose.yml not found in repository"
              exit 1
            fi
            
            # Stop all containers
            echo "Stopping existing containers..."
            docker-compose down
            
            # Aggressive cleanup before building (remove all unused resources)
            echo "Performing aggressive Docker cleanup before building..."
            # Remove all stopped containers
            docker container prune -f
            # Remove all dangling images
            docker image prune -f
            # Remove unused volumes
            docker volume prune -f
            # Remove unused networks
            docker network prune -f
            # Remove all unused images (not just dangling ones)
            docker image prune -a -f
            
            # Build and start containers
            echo "Building and starting containers..."
            export COMPOSE_BAKE=true
            echo "Buiding MQTT Broker..."
            docker-compose build mqtt-broker --no-cache
            echo "Buiding Postgres..."
            docker-compose build postgres --no-cache
            echo "Buiding Notification Service..."
            docker-compose build notification-service --no-cache
            echo "Buiding Backend..."
            docker-compose build backend --no-cache
            echo "Buiding Frontend..."
            docker-compose build frontend --no-cache
            echo "Composing up..."
            docker-compose up -d
            
            # Thorough cleanup after deployment
            echo "Performing thorough cleanup after deployment..."
            # Keep only images used by running containers
            docker image prune -a -f
            # Clean entire system
            docker system prune -a -f --volumes
            
            # Cleanup old logs (keep only the most recent 10)
            echo "Cleaning up old deployment logs..."
            cd ~/deploy-logs
            ls -t | tail -n +11 | xargs -r rm
            
            # Check disk space after deployment
            echo "Disk usage after deployment:"
            df -h /
            
            echo "=== Staging Deployment completed at $(date) ==="
          } 2>&1 | tee -a "$LOG_FILE"
          
          # Display result
          echo "Staging Deployment completed. Log saved to $LOG_FILE"
        '